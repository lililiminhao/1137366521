<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:jdbc="http://www.springframework.org/schema/jdbc"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:task="http://www.springframework.org/schema/task"
        xmlns:cache="http://www.springframework.org/schema/cache"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
                        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
                        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
                        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.1.xsd
                        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
                        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd
                        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.1.xsd">
    
    <!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->    
    <context:component-scan base-package="com.lmf" use-default-filters="true">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
        <context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
    </context:component-scan>
    
    <!--注册本地服务-->
    <bean id="websiteProxyService" class="com.lmf.integral.service.impl.WebsiteProxyServiceImpl" depends-on="websiteService" />
 
    <!--httpClient-->
    <bean id="httpClient" class="com.lmf.common.httpclient.HttpClientFactoryBean" >
        <property name="connectionTimemout" value="${http.connection_timemout}" />
    </bean>
    
    <bean id="chunzhenIPResolver" class="com.lmf.common.IPResolverFactory" destroy-method="shutdown">
        <property name="chunzhenDBPath" value="${chunzhen.ip.path}" />
        <property name="closeOnExit" value="${chunzhen.ip.closeOnExit}" />
    </bean>
    
    <bean id="fireWall" class="com.lmf.integral.secuity.FireWall">
        <property name="fireWallRules">
            <set>
                <bean class="com.lmf.integral.secuity.Rule">
                    <property name="type" value="START_WITH" />
                    <property name="value" value="/my/" />
                    <property name="filterType" value="VALID_USER" />
                </bean>
            </set>
        </property>
    </bean>
    <bean class="com.lmf.integral.SystemConfig">
       <property name="developEnvironment" value="${system.environment.develop}" />
       <property name="imageHost" value="${system.image.host}" />
       <property name="websiteId" value="${system.website.id}" />
       <property name="vhost" value="${system.website.vhost}" />
       <property name="hostName" value="${system.website.hostname}" />
       <property name="loginUrl" value="${system.website.login_url}" />
       <property name="apiHost" value="${system.shiminka.api_host}" />
       <property name="tsmpayHost" value="${tsmpay.host}" />
       <property name="merchantNo" value="${tsmpay.account.merchantNo}" />
       <property name="appId" value="${wx.pay.appId}" />
       <property name="mchId" value="${wx.pay.mchId}" />
       <property name="apiKey" value="${wx.pay.apiKey}" />
       <property name="appsecret" value="${wx.pay.appsecret}" />
       <property name="keyPath" value="${wx.pay.keyPath}" />
       <property name="merchantKey" value="${tsmpay.account.key}" />
       <property name="wapSubmitUrl" value="${smkpay.wap.submit_url}" />
       <property name="sendChl" value="${smkpay.sendChl}" />
       <property name="sendClient" value="${smkpay.sendClient}" />
       <property name="merCode" value="${smkpay.merCode}" />
       <property name="smkpayRefundUrl" value="${smkpay.refund_url}" />
       <property name="pfxPassword" value="${smkpay.sign.pfx_password}" />
       <property name="afterCompletedOrderForEnableAftersaleDays" value="${aftersale_enable.after_completed_order.days}" />
   	</bean>
    
    <!-- 登录拦截器start -->
    <bean id="loginFilter" class="com.lmf.integral.secuity.LoginFilter">
        <property name="fireWall" ref="fireWall" />
        <property name="websiteProxyService" ref="websiteProxyService" />
    </bean>
    
    <bean id="administratorFilter" class="com.lmf.integral.admin.security.AdministratorFilter"></bean>
    <!-- 登录拦截器end -->
    
    <!-- 计划任务配置 -->
    <task:executor id="executor" pool-size="8" queue-capacity="128" />
    <task:scheduler id="scheduler" pool-size="4" />
    <task:annotation-driven executor="executor" scheduler="scheduler" />
    <bean id="websiteReloadConfigTask" class="com.lmf.integral.task.WebsiteReloadConfigTask" />
    <bean id="systemProductReloadTask" class="com.lmf.integral.task.SystemProductReloadTask" />
    <bean id="closeWaitingPayOrderTask" class="com.lmf.integral.task.CloseWaitingPayOrderTask" />
    <bean id="systemAfterSaleTask" class="com.lmf.integral.task.SystemAfterSaleTask" />
    <bean id="refreshJinDongRegionTask" class="com.lmf.integral.task.RefreshJinDongRegionTask" />
    <bean id="checkSmkRefundStatusTask" class="com.lmf.integral.task.CheckSmkRefundStatusTask" />
    <bean id="confirmReceiptOrderTask" class="com.lmf.integral.task.ConfirmReceiptOrderTask" />
    <bean id="fenxiaoTask" class="com.lmf.integral.task.FenxiaoTask" />
    <bean id="fenxiaoSyncOrderStatusTask" class="com.lmf.integral.task.FenxiaoSyncOrderStatusTask" />
    <!-- <bean id="pushOrderTask" class="com.lmf.integral.task.PushOrderTask" /> -->
    
    
    <!-- 配置数据源 -->
    <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
    	<property name="driverClassName" value="${jdbc.driverClass}" />
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 初始化连接大小 -->
        <property name="initialSize" value="0"/>
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="20"/>
        <!-- 连接池最大空闲 已经废弃 -->
        <!-- <property name="maxIdle" value="20"/> -->
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="0"/>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="60000"/>

        <property name="validationQuery" value="SELECT 1"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <property name="testWhileIdle" value="true"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="25200000"/>

        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="1800"/>
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true"/>

        <!-- 监控数据库 -->
        <!-- <property name="filters" value="mergeStat"/> -->
        <!-- <property name="filters" value="stat"/> -->
    </bean>
    
    <bean class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource" />
    </bean>
    
    <!-- 新配置开始 -->
    <bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean">
   		<property name="dataSource" ref="dataSource" />
   		<!-- <property name="mapperLocations" value="classpath:com/colorfulflorist/smk/mapper/xml/*Mapper.xml" /> -->
   		<property name="mapperLocations">
   			<array>
                <value>classpath:com/colorfulflorist/smk/**/mapper/xml/*Mapper.xml</value>
                <!-- <value>classpath*:com/baomidou/ant/**/mapper/xml/*Mapper.xml</value> -->
            </array>
   		</property>
   		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
   		<!-- 多个使用分号分隔com.baomidou.springwind.entity;com.baomidou.springwind.entity.vo -->
		<property name="typeAliasesPackage" value="com.colorfulflorist.smk.**.entity" />
		<property name="typeEnumsPackage" value="com.colorfulflorist.smk.**.enums"/>
        <property name="plugins">
            <array>
                <!-- 分页插件配置 -->
                <bean id="paginationInterceptor" class="com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor">
			        <property name="dialectType" value="postgresql" />
			    </bean>
            </array>
        </property>
        <!-- 全局配置注入 -->
	    <!-- <property name="globalConfig" ref="globalConfig" /> -->
	    <property name="globalConfig">
	        <bean class="com.baomidou.mybatisplus.core.config.GlobalConfig">
	        	<!-- 是否刷新 mapper -->
	            <property name="refresh" value="true"/>
	            <property name="dbConfig" ref="dbConfig"/>
	            <!-- <property name="metaObjectHandler">
		            <bean class="com.baomidou.springmvc.common.MyMetaObjectHandler" />
		        </property> -->
	        </bean>
	    </property>
    </bean>
	<!-- 获取枚举值 -->
    <bean id="idTypeAuto" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
		<property name="staticField" value="com.baomidou.mybatisplus.annotation.IdType.AUTO" />
	</bean>
	
	<bean id="dbTypePostgre" class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
		<property name="staticField" value="com.baomidou.mybatisplus.annotation.DbType.POSTGRE_SQL" />
	</bean>
    
    <bean id="dbConfig" class="com.baomidou.mybatisplus.core.config.GlobalConfig.DbConfig">
	    <!--
			AUTO->`0`("数据库ID自增")
		 	INPUT->`1`(用户输入ID")
			ID_WORKER->`2`("全局唯一ID")
			UUID->`3`("全局唯一ID")
		-->
	    <property name="idType" ref="idTypeAuto" />
		<!--
			MYSQL->`mysql`
			ORACLE->`oracle`
			DB2->`db2`
			H2->`h2`
			HSQL->`hsql`
			SQLITE->`sqlite`
			POSTGRE->`postgresql`
			SQLSERVER2005->`sqlserver2005`
			SQLSERVER->`sqlserver`
		-->
	    <property name="dbType" ref="dbTypePostgre" />
	    <property name="tableUnderline" value="true" />
	    <!-- POSTGRESSQL主键生成器 -->
	    <property name="keyGenerator">
	        <bean class="com.baomidou.mybatisplus.extension.incrementer.PostgreKeyGenerator" />
	    </property>
	</bean>
    
    <!-- 加载 mapper.xml 接口 配置文件 -->
 	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
 		<!-- com.colorfulflorist.smk.mapper;com.baomidou.ant.**.mapper -->
		<property name="basePackage" value="com.colorfulflorist.smk.**.mapper" />
	</bean>
	
	<!-- 扫描 service -->
	<!-- com.colorfulflorist.smk.**.service.impl;com.baomidou.ant.**.service.impl -->
	<context:component-scan base-package="com.colorfulflorist.smk.**.service.impl" />
	
	<!-- AOP事务管理 属性 -->
    <!-- <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="append*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="modify*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="edit*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="remove*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="repair" propagation="REQUIRED" rollback-for="Exception" />

            <tx:method name="get*" propagation="REQUIRED" read-only="true" />
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />
            <tx:method name="load*" propagation="REQUIRED" read-only="true" />
            <tx:method name="search*" propagation="REQUIRED" read-only="true" />
            <tx:method name="datagrid*" propagation="REQUIRED" read-only="true" />

            <tx:method name="*" propagation="REQUIRED" read-only="true" />
        </tx:attributes>
    </tx:advice> -->

    <!-- AOP配置切面 -->
<!--     <aop:config>
        <aop:pointcut id="transactionPointcut" 
        expression="execution(* com.colorfulflorist.smk.activity.service..*.*(..))
        ||execution(* com.colorfulflorist.smk.enterprise.service..*.*(..))
        ||execution(* com.colorfulflorist.smk.market.service..*.*(..))
        ||execution(* com.colorfulflorist.smk.openapi.service..*.*(..))
        ||execution(* com.colorfulflorist.smk.orders.service..*.*(..))
        ||execution(* com.colorfulflorist.smk.product.service..*.*(..))
        ||execution(* com.colorfulflorist.smk.sys.service..*.*(..))
        ||execution(* com.colorfulflorist.smk.website.service..*.*(..))"/>
        <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice"/>
    </aop:config> -->
	
    <!-- 新配置结束 -->
    
    <bean class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
        <constructor-arg index="0" ref="dataSource" type="javax.sql.DataSource" />
    </bean>
    
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    
    <tx:annotation-driven transaction-manager="transactionManager" />
    
    <!-- development环境 -->
    <beans profile="development,test">
        <bean class="java.util.SimpleTimeZone" factory-method="getTimeZone">
            <constructor-arg value="${timezone}" type="String" />
        </bean>
        
        <bean class="com.lmf.product.StorageConfig">
            <property name="imageSaveDir" value="${internal.attachment.path}" />
        </bean>
                
        <bean id="imageService" class="com.lmf.common.image.impl.ImageServiceFactory">
            <property name="bigSize" value="${image.service.size.big}" />
            <property name="middleSize" value="${image.service.size.middle}" />
            <property name="faceSize" value="${image.service.size.face}" />
            <property name="subFaceSize" value="${image.service.size.subFace}" />
            <property name="smallSize" value="${image.service.size.small}" />
            <property name="lockRatio" value="${image.service.lockRatio}" />
            <property name="imageEngineClass" value="${image.engine.class}" />
        </bean>
        
        <bean id="viewSettings" class="com.lmf.integral.ViewSettings">
            <property name="imageHost" value="${system.image.host}" />
        </bean>
		
        <!-- 缓存相关环境start -->
        <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
            <property name="maxTotal" value="${redis.pool.maxTotal}" />
            <property name="maxIdle" value="${redis.pool.maxIdle}" />
            <property name="minIdle" value="${redis.pool.minIdle}" />
            <property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
        </bean>

        <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
            <property name="hostName" value="${redis.host}" />
            <property name="port" value="${redis.port}" />
            <property name="usePool" value="true" />
            <property name="poolConfig" ref="jedisPoolConfig" />
        </bean>

        <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
            <property name="connectionFactory" ref="jedisConnectionFactory" />
            <property name="keySerializer">
                <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
            </property>
            <property name="hashKeySerializer">
                <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
            </property>
        </bean>
        <!-- 缓存相关环境end -->
    </beans>
    
    <beans profile="development">
        <bean id="themeManager" class="com.lmf.website.theme.v2.manager.impl.ThemeManagerFactory" init-method="init">
            <property name="websiteThemePath" value="/WEB-INF/themes/website/blocks" />
        </bean>
    </beans>
    
    <beans profile="test">
        <bean id="themeManager" class="com.lmf.website.theme.v2.manager.impl.ThemeManagerFactory" init-method="init">
            <property name="websiteThemePath" value="" />
        </bean>
    </beans>
    
    <beans profile="development,test">
        <context:property-placeholder ignore-resource-not-found="true" location="classpath*:development.properties" />
    </beans>
    
</beans>
